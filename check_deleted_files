#!/usr/bin/env perl

use strict;
use warnings;
use English qw( -no_match_vars );

# Configuration for nagios
my $CRITICAL_THRESHOLD  = 5;    # used as a percentage
my %nagios_states      = (
    "OK"       => "0",
    "WARNING"  => "1",
    "CRITICAL" => "2",
    "UNKNOWN"  => "3"
);
my $status = "OK";             # start off on the good foot

my %df     = ();
my %deleted_files  = ();
my @mounts = ();

open my $df_kp, '-|', 'df -kP' or die "Cannot run df -kP: $OS_ERROR";
while ( my $df_line = <$df_kp> ) {
    next unless $df_line =~ m{
        ^
        .*       # filesystem
        \s+
        (\d+)    # 1024-blocks
        \s+
        \d+      # Used
        \s+
        \d+      # Available
        \s+
        \d+%     # Capacity
        \s+
        (/.*?)   # Mounted on
        \s*
        $
    }x;
    my $mountpoint = $2;
    my $size       = $1;
    $mountpoint =~ s#/*$#/#;    # Add / at the end, if it's not there
    $df{ $mountpoint }->{ 'size' } = $size;
    push @mounts, $mountpoint;
}
close $df_kp;

# Mounts should be sorted by length, so $mounts_re will match the best
# matching prefix, and not first prefix.
# For example, consider mountpoints:
# - /mnt
# - /mnt/whatever
# If the regexp would be build like: (/mnt|/mnt/whatever) - then any file in
# /mnt/whatever would be counted as in /mnt, because it's first part of
# alternative in the regexp.
my @mounts_sorted_by_length = sort { length( $b ) <=> length( $a ) } @mounts;
my $mounts_re = sprintf '%s', join( '|', @mounts_sorted_by_length );

my $total_lost = 0;

opendir my $dir, '/proc';
my @inside = grep { /^\d+$/ } readdir $dir;
closedir $dir;

for my $process ( @inside ) {
    opendir my $dir, "/proc/$process/fd" or next;
    for my $fd_name ( grep { /^\d+$/ } readdir $dir ) {
        my $link_name = "/proc/$process/fd/$fd_name";
        my @stat      = stat( $link_name );
        next if 0 < $stat[ 3 ];

        my $file_name = readlink( $link_name );
        # prevent counting a single file multiple times in cases were multiple processes have a file descriptor to it (i.e. chef-server workers)
        unless ( exists $deleted_files{ $file_name } ) {
            # This regexp below should always match, so the "next unless" is just
            # sanity check
            next unless $file_name =~ m{^($mounts_re)};
            my $mountpoint = $1;

            my $size = $stat[7];
            my $size_KB = $size / 1024; # df data is in KB, but stat is in bytes
            $total_lost += $size_KB;
            $df{ $mountpoint }->{ 'deleted' } += $size_KB;
            $df{ $mountpoint }->{ 'deleted_files' }->{ $link_name } = $file_name;
            $deleted_files{ $file_name }->{ 'size_KB' } = $size_KB;
            push @{ $deleted_files{ $file_name }->{ 'procs' } }, $process;  # store the processes that have a file descriptot to this file, in case we need it (i.e. counts)
        } else {    # simply push the PID into our pretty little array
            push @{ $deleted_files{ $file_name }->{ 'procs' } }, $process;
        }
    }
    closedir $dir;
}

my $total_lost_MB = $total_lost / 1024;
for my $mountpoint ( keys %df ) {
    next unless $df{ $mountpoint }->{ 'deleted' };
    my $lost_percent = 100 * $df{ $mountpoint }->{ 'deleted' } / $df{ $mountpoint }->{ 'size' };
    my $deleted_MB   = $df{ $mountpoint }->{ 'deleted' } / 1024;                                   # 'deleted has already been converted to KB
                                                                                                   # only complain if we're above the CRITICAL_THRESHOLD
    if ( $lost_percent >= $CRITICAL_THRESHOLD ) {
        $status = 'CRITICAL';
        printf "%s: %dMB (%.2f%%) being held open in deleted files on \'%s\'! Overall, %dMB is being held open in deleted files on this host.\n", $status, $deleted_MB, $lost_percent,
            $mountpoint, $total_lost_MB;
        exit( $nagios_states{ $status } ) if $lost_percent >= $CRITICAL_THRESHOLD;
    }
}

if ( $total_lost_MB > 0 ) {
    printf "%s: %dMB being held open in deleted files.\n", $status, $total_lost_MB;
}
else {
    printf "%s: No deleted files are being held open.\n", $status;
}
exit( $nagios_states{ $status } );
